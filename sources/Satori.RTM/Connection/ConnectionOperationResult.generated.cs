//------------------------------------------------------------------------------
// <auto-generated>                                                       
//     This code was generated by a tool.                                       
//                                                                              
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                      
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Satori.Rtm
{
    using System;
    abstract public class ConnectionOperationResult
    {
        public enum Id
        {
            disconnected,
            failure,
            reply
        }
        public interface IMatch
        {
            void OnDisconnected(Disconnected disconnected);
            void OnFailure(Failure failure);
            void OnReply(Reply reply);
        }
        public interface IMatch<TMatch>
        {
            TMatch OnDisconnected(Disconnected disconnected);
            TMatch OnFailure(Failure failure);
            TMatch OnReply(Reply reply);
        }
        public delegate void OnDisconnectedCallback(Disconnected disconnected);
        public delegate void OnFailureCallback(Failure failure);
        public delegate void OnReplyCallback(Reply reply);
        public delegate TMatch OnDisconnectedCallback<TMatch>(Disconnected disconnected);
        public delegate TMatch OnFailureCallback<TMatch>(Failure failure);
        public delegate TMatch OnReplyCallback<TMatch>(Reply reply);
        public readonly Id id;
        public class Disconnected : ConnectionOperationResult
        {
            public Disconnected() : base(Id.disconnected)
            {
            }
            public override void Match(IMatch handler)
            {
                handler.OnDisconnected(this);
            }
            public override TMatch Match<TMatch>(IMatch<TMatch> handler)
            {
                return handler.OnDisconnected(this);
            }
            public override void Match(OnDisconnectedCallback disconnected, OnFailureCallback failure, OnReplyCallback reply)
            {
                disconnected(this);
            }
            public override TMatch Match<TMatch>(OnDisconnectedCallback<TMatch> disconnected, OnFailureCallback<TMatch> failure, OnReplyCallback<TMatch> reply)
            {
                return disconnected(this);
            }
            public override bool IsDisconnected()
            {
                return true;
            }
            public override Disconnected AsDisconnected()
            {
                return this;
            }
            public override bool OnDisconnected(OnDisconnectedCallback callback)
            {
                callback(this);
                return false;
            }
        }
        public class Failure : ConnectionOperationResult
        {
            public readonly Exception error;
            public Failure(Exception error) : base(Id.failure)
            {
                this.error = error;
            }
            public override void Match(IMatch handler)
            {
                handler.OnFailure(this);
            }
            public override TMatch Match<TMatch>(IMatch<TMatch> handler)
            {
                return handler.OnFailure(this);
            }
            public override void Match(OnDisconnectedCallback disconnected, OnFailureCallback failure, OnReplyCallback reply)
            {
                failure(this);
            }
            public override TMatch Match<TMatch>(OnDisconnectedCallback<TMatch> disconnected, OnFailureCallback<TMatch> failure, OnReplyCallback<TMatch> reply)
            {
                return failure(this);
            }
            public override bool IsFailure()
            {
                return true;
            }
            public override Failure AsFailure()
            {
                return this;
            }
            public override bool OnFailure(OnFailureCallback callback)
            {
                callback(this);
                return false;
            }
        }
        public abstract partial class Reply : ConnectionOperationResult
        {
            public new enum Id
            {
                positive,
                negative,
                unknown
            }
            public new interface IMatch
            {
                void OnPositive(Positive positive);
                void OnNegative(Negative negative);
                void OnUnknown(Unknown unknown);
            }
            public new interface IMatch<TMatch>
            {
                TMatch OnPositive(Positive positive);
                TMatch OnNegative(Negative negative);
                TMatch OnUnknown(Unknown unknown);
            }
            public delegate void OnPositiveCallback(Positive positive);
            public delegate void OnNegativeCallback(Negative negative);
            public delegate void OnUnknownCallback(Unknown unknown);
            public delegate TMatch OnPositiveCallback<TMatch>(Positive positive);
            public delegate TMatch OnNegativeCallback<TMatch>(Negative negative);
            public delegate TMatch OnUnknownCallback<TMatch>(Unknown unknown);
            public readonly Pdu pdu;
            public class Positive : Reply
            {
                public Positive(Pdu pdu) : base(pdu, Id.positive)
                {
                }
                public override void Match(IMatch handler)
                {
                    handler.OnPositive(this);
                }
                public override TMatch Match<TMatch>(IMatch<TMatch> handler)
                {
                    return handler.OnPositive(this);
                }
                public override void Match(OnPositiveCallback positive, OnNegativeCallback negative, OnUnknownCallback unknown)
                {
                    positive(this);
                }
                public override TMatch Match<TMatch>(OnPositiveCallback<TMatch> positive, OnNegativeCallback<TMatch> negative, OnUnknownCallback<TMatch> unknown)
                {
                    return positive(this);
                }
                public override bool IsPositive()
                {
                    return true;
                }
                public override Positive AsPositive()
                {
                    return this;
                }
                public override bool OnPositive(OnPositiveCallback callback)
                {
                    callback(this);
                    return false;
                }
            }
            public class Negative : Reply
            {
                public Negative(Pdu pdu) : base(pdu, Id.negative)
                {
                }
                public override void Match(IMatch handler)
                {
                    handler.OnNegative(this);
                }
                public override TMatch Match<TMatch>(IMatch<TMatch> handler)
                {
                    return handler.OnNegative(this);
                }
                public override void Match(OnPositiveCallback positive, OnNegativeCallback negative, OnUnknownCallback unknown)
                {
                    negative(this);
                }
                public override TMatch Match<TMatch>(OnPositiveCallback<TMatch> positive, OnNegativeCallback<TMatch> negative, OnUnknownCallback<TMatch> unknown)
                {
                    return negative(this);
                }
                public override bool IsNegative()
                {
                    return true;
                }
                public override Negative AsNegative()
                {
                    return this;
                }
                public override bool OnNegative(OnNegativeCallback callback)
                {
                    callback(this);
                    return false;
                }
            }
            public class Unknown : Reply
            {
                public Unknown(Pdu pdu) : base(pdu, Id.unknown)
                {
                }
                public override void Match(IMatch handler)
                {
                    handler.OnUnknown(this);
                }
                public override TMatch Match<TMatch>(IMatch<TMatch> handler)
                {
                    return handler.OnUnknown(this);
                }
                public override void Match(OnPositiveCallback positive, OnNegativeCallback negative, OnUnknownCallback unknown)
                {
                    unknown(this);
                }
                public override TMatch Match<TMatch>(OnPositiveCallback<TMatch> positive, OnNegativeCallback<TMatch> negative, OnUnknownCallback<TMatch> unknown)
                {
                    return unknown(this);
                }
                public override bool IsUnknown()
                {
                    return true;
                }
                public override Unknown AsUnknown()
                {
                    return this;
                }
                public override bool OnUnknown(OnUnknownCallback callback)
                {
                    callback(this);
                    return false;
                }
            }
            protected Reply(Pdu pdu, Id id) : base(ConnectionOperationResult.Id.reply)
            {
                this.pdu = pdu;
            }
            public abstract void Match(IMatch handler);
            public abstract TMatch Match<TMatch>(IMatch<TMatch> handler);
            public abstract void Match(OnPositiveCallback positive, OnNegativeCallback negative, OnUnknownCallback unknown);
            public abstract TMatch Match<TMatch>(OnPositiveCallback<TMatch> positive, OnNegativeCallback<TMatch> negative, OnUnknownCallback<TMatch> unknown);
            public virtual bool IsPositive()
            {
                return false;
            }
            public virtual bool IsNegative()
            {
                return false;
            }
            public virtual bool IsUnknown()
            {
                return false;
            }
            public virtual Positive AsPositive()
            {
                return null;
            }
            public virtual Negative AsNegative()
            {
                return null;
            }
            public virtual Unknown AsUnknown()
            {
                return null;
            }
            public virtual bool OnPositive(OnPositiveCallback callback)
            {
                return false;
            }
            public virtual bool OnNegative(OnNegativeCallback callback)
            {
                return false;
            }
            public virtual bool OnUnknown(OnUnknownCallback callback)
            {
                return false;
            }
            public override void Match(ConnectionOperationResult.IMatch handler)
            {
                handler.OnReply(this);
            }
            public override TMatch Match<TMatch>(ConnectionOperationResult.IMatch<TMatch> handler)
            {
                return handler.OnReply(this);
            }
            public override void Match(OnDisconnectedCallback disconnected, OnFailureCallback failure, OnReplyCallback reply)
            {
                reply(this);
            }
            public override TMatch Match<TMatch>(OnDisconnectedCallback<TMatch> disconnected, OnFailureCallback<TMatch> failure, OnReplyCallback<TMatch> reply)
            {
                return reply(this);
            }
            public override bool IsReply()
            {
                return true;
            }
            public override Reply AsReply()
            {
                return this;
            }
            public override bool OnReply(OnReplyCallback callback)
            {
                callback(this);
                return true;
            }
        }
        protected ConnectionOperationResult(Id id)
        {
        }
        public abstract void Match(IMatch handler);
        public abstract TMatch Match<TMatch>(IMatch<TMatch> handler);
        public abstract void Match(OnDisconnectedCallback disconnected, OnFailureCallback failure, OnReplyCallback reply);
        public abstract TMatch Match<TMatch>(OnDisconnectedCallback<TMatch> disconnected, OnFailureCallback<TMatch> failure, OnReplyCallback<TMatch> reply);
        public virtual bool IsDisconnected()
        {
            return false;
        }
        public virtual bool IsFailure()
        {
            return false;
        }
        public virtual bool IsReply()
        {
            return false;
        }
        public virtual Disconnected AsDisconnected()
        {
            return null;
        }
        public virtual Failure AsFailure()
        {
            return null;
        }
        public virtual Reply AsReply()
        {
            return null;
        }
        public virtual bool OnDisconnected(OnDisconnectedCallback callback)
        {
            return false;
        }
        public virtual bool OnFailure(OnFailureCallback callback)
        {
            return false;
        }
        public virtual bool OnReply(OnReplyCallback callback)
        {
            return false;
        }
    }
}
